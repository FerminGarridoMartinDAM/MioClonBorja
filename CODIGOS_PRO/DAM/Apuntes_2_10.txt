Dar conjunto de instrucciones para poder llegar a un objetivo -> para que las ejecute una maquina

0/1 -> lenguaje bajo nivel -> codigo maquina -> lenguaje ensamblador
	-> lenguaje "natural" -> compilador -> J V M -> codigo maquina -> ejecutat



ALGORITMO -> conjunto de pasos estructurados que tienen una entrada, un proceso y una salida
INPUTS -> aceite, huevo, sarten
	PROCESO -> cada uno de los pasos qie me permiten llegar a un objetivo
OUTPUT -> huevo frito

PROGRAMAR ES HACER n ALGORITMOS -> DIVIDE Y VENCERAS

PROGRAMA DE GESTION DE NOMINAS DE UNA EMPRESA -> OK

Gestionan los trabajadores -> OK
Calcula el irpf en una nomima -> OK
Generan las nominas -> OK 
Mandan por correo las nominas -> OK
Da de alta un usuario -> OK

IDEA Community Edition + Java + JDK + GitHub + GitHubDesktop


IntelliJ
	Todas aquellas dependencias (librerias) que necesites, las descargas y las incorporar manualmente
	mail -> descargo y la a√±ado (.jar)
Maven / Gradle
	Todas aquellas dependencias (librerias) que necesites, se las pido a un servidor
	pom.xml / build.gradle

	    <dependencies>
            <dependency>
                <groupId>com.sun.mail</groupId>
                <artifactId>javax.mail</artifactId>
                <version>3.6.2</version>
            </dependency>
        </dependencies>


ELEMENTOS PRINCIPALES

1 CLASES -> estructura basica de la programacion. Donde escribimos nuestros codigos. Cuando tratemos POO una clase es el molde de un objeto
			El nombre de la clase va la primera en mayusculas, sin espacios
			Los nombre son representativos -> CLEAN CODE
			El nombre de las clases no puede ser una palabra reservada
			El nombre de la clase coincide con el nombre del fichero .java

2 METODOS -> definen funcionalidades. Tienen argumentos, tienen una cosa que se llama retorno, tienen una 				coas que se llama cuerpo
			El nombre del metodo se escribe en minuscula. minusculaPalabra
			El nombre de las clases no puede ser una palabra reservada
			Los nombre son representativos -> CLEAN CODE

			modificador_acceso modificador_retorno nombreMetodo (argumentos){ cuerpo del metodo }


			main -> es el metodo principal del programa. La puerta de entrada del programa





